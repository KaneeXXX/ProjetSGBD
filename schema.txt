@startuml
entity Refuge {
* emailRef
--
* nomRef
* numTel
* secGeo
* dateOuv
* dateFerme
* nbrPlacesRepas
* nbrPlacesDormir
* textePrez
* typePayement
* prixNuite
}

entity Repas {
* typeRepas
--
}

Object prix

entity Formation {
* numero
* annee
--
* nom
* dateDem
* duree
* nbrPlace
* desc
* prix
* nbrActivité
}

entity Activité {
'* idFormation
/' contrainte appli : position <= Formation(nbrActivité) '/
'* position
* nomActivité
}

object positionAct

/'entity Matériel {
* marque
* modele
* anneeAchat
}'/

/'
On peut inférer qu'un CompteUtilisateur appartient à un Adhérent
'/
entity CompteUtilisateur {
* idUser
--
* coutReserv
* sommeMateriélAbime
* sommeRembourse
}

entity Lot {
* marque
* modele
* anneeAchat
--
'* categorieLot
* nbPieces
* prixPerte
'* typeActiv
* texte "optionnel"
* anneePeremption
}

entity Arbre {
* sousCategorie
--
* categorie
}
Lot "1..*" -- "1..1" Arbre : AUneCategorie >
Arbre "0..1" -- "0..*" Arbre : EstParentDe >

object PiecesLouees

entity Membre {
* email
* mot de passe
'* idUser
--
* nom
* prenom
* adrPost
}

/' Avec la duplication, on aura un table Adhérent qui aura les mêmes attributs que le table Membre. Au niveau application, si un user a le droit de réserver une formation ou une location de matériel, on vérifie si idUser est dans le table Adhérent '/
entity Adhérent  {
* idAdherent
}

entity RésérvationRefuge {
* id
--
* date
* heure
* refuge
* idMembreReserve
* nbrNuits
'* nbrRepasReserve
* prixTotal
}

object nbRepasReserve

entity RésérvationFormation {
* id
--
* idAdhérent
* formationInscrite
'* listeAttente
'* rang 'si liste d'attente
}

entity LocationMatériel {
* id
--
* adhérent
* nbPiecesReserv
* dateRécup
* dateRetour
* nbPiecesPerdues
}

/'
EstDansListeAttente(IdAdherent {pk}, IdFormation {pk}, Rang)
* IdAdhérent référence Adhérent(idAdhérent)
* IdFormation référence Formation(idFormation)
'/
entity ListeAttente {
* idAdhérent
* idFormation
* rang
--
}

RésérvationFormation "0..*" -- "0..1" ListeAttente : AListeAttente >

Lot "1..*" -- "1..*" Activité : compatibleAvecActivité >

/' "Le matériel est enregistré sous forme de lots"  '/
CompteUtilisateur "1..1" -- "0..1" Membre : possèdeCompte <
Adhérent --|> Membre : { facultatif } 

RésérvationFormation "0..*" -- "1..1" Formation : concerneFormation >
LocationMatériel "0..*" -- "1..1" CompteUtilisateur : loueMatériel <
RésérvationFormation "0..*" -- "1..1" CompteUtilisateur : réserveFormation <
RésérvationRefuge "0..*" -- "1..1" CompteUtilisateur : réserveRefuge <
RésérvationRefuge "0..*" -- "1..1" Refuge : concerneRefuge >

<> diamond1

LocationMatériel "0..*" -- diamond1
diamond1 -- "1..1" Lot : estLoué <
diamond1 .. PiecesLouees

<> diamond2

Refuge "1..*" -- diamond2 : proposeRepas >
diamond2 -- "1..*" Repas
diamond2 .. prix

<> diamond3
RésérvationRefuge "0..*" -- diamond3 : reserveRepas >
diamond3 -- "1..*" Repas
diamond3 .. nbRepasReserve

/' Au moins 5 activités dans une formation,
   contrainte au niveau application '/
Formation "1..*" -- "1..*" : proposeActivitéForm >
@enduml
